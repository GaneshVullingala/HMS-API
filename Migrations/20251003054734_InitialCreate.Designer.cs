// <auto-generated />
using System;
using EcommerceApi.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace EcommerceApi.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251003054734_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("EcommerceApi.Models.CommunicationInfo", b =>
                {
                    b.Property<int>("CommId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CommId"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CommId");

                    b.HasIndex("GenId");

                    b.ToTable("tblCommunicationInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.ConsultationInfo", b =>
                {
                    b.Property<int>("ConsultId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ConsultId"));

                    b.Property<string>("Advice")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("CurrentStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Diognosis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<int>("FrontDeskId")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<string>("Problem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("RevisitDate")
                        .HasColumnType("datetime2");

                    b.HasKey("ConsultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("FrontDeskId");

                    b.HasIndex("PatientId");

                    b.ToTable("tblConsultationInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.DoctorInfo", b =>
                {
                    b.Property<int>("DoctorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DoctorId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DoctorId");

                    b.HasIndex("GenId");

                    b.ToTable("tblDoctorInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.FrontDeskInfo", b =>
                {
                    b.Property<int>("FrontDeskId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FrontDeskId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("DocImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Experience")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("GenId")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhotoImgUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Qualification")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Speciality")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FrontDeskId");

                    b.HasIndex("GenId");

                    b.ToTable("tblFrontDeskInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.GeneralInfo", b =>
                {
                    b.Property<int>("Genid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Genid"));

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Roleid")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Genid");

                    b.HasIndex("Roleid");

                    b.ToTable("tblGeneralInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.LoginInfo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genid")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("Genid");

                    b.ToTable("tblLoginInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PatientInfo", b =>
                {
                    b.Property<int>("PatientId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PatientId"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Fee")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FrontdeskId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Genid")
                        .HasColumnType("int");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pincode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PresentProblem")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PreviousHistory")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("PatientId");

                    b.ToTable("tblPatientInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PatientVisitInfo", b =>
                {
                    b.Property<int>("VisitId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VisitId"));

                    b.Property<int>("ConsultId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("LastVisitDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("VisitId");

                    b.HasIndex("ConsultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("tblPatientVisitInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PatientVitalsInfo", b =>
                {
                    b.Property<int>("VitalsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VitalsId"));

                    b.Property<string>("BP")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("Height")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<decimal>("SPO2")
                        .HasColumnType("decimal(18,2)");

                    b.Property<string>("Sugar")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Weight")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("VitalsId");

                    b.HasIndex("PatientId");

                    b.ToTable("tblPatientVitalsInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PrescriptionInfo", b =>
                {
                    b.Property<int>("PrescriptionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrescriptionId"));

                    b.Property<int>("ConsultId")
                        .HasColumnType("int");

                    b.Property<int>("DoctorId")
                        .HasColumnType("int");

                    b.Property<string>("Medicine1")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medicine1Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Medicine2")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medicine2Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Medicine3")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medicine3Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Medicine4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medicine4Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Medicine5")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Medicine5Quantity")
                        .HasColumnType("int");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<int>("isANoonMedicine1")
                        .HasColumnType("int");

                    b.Property<int>("isANoonMedicine2")
                        .HasColumnType("int");

                    b.Property<int>("isANoonMedicine3")
                        .HasColumnType("int");

                    b.Property<int>("isANoonMedicine4")
                        .HasColumnType("int");

                    b.Property<int>("isANoonMedicine5")
                        .HasColumnType("int");

                    b.Property<int>("isMrngMedicine1")
                        .HasColumnType("int");

                    b.Property<int>("isMrngMedicine2")
                        .HasColumnType("int");

                    b.Property<int>("isMrngMedicine3")
                        .HasColumnType("int");

                    b.Property<int>("isMrngMedicine4")
                        .HasColumnType("int");

                    b.Property<int>("isMrngMedicine5")
                        .HasColumnType("int");

                    b.Property<int>("isNightMedicine1")
                        .HasColumnType("int");

                    b.Property<int>("isNightMedicine2")
                        .HasColumnType("int");

                    b.Property<int>("isNightMedicine3")
                        .HasColumnType("int");

                    b.Property<int>("isNightMedicine4")
                        .HasColumnType("int");

                    b.Property<int>("isNightMedicine5")
                        .HasColumnType("int");

                    b.HasKey("PrescriptionId");

                    b.HasIndex("ConsultId");

                    b.HasIndex("DoctorId");

                    b.HasIndex("PatientId");

                    b.ToTable("tblprescriptionInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.RoleInfo", b =>
                {
                    b.Property<int>("RoledId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoledId"));

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RoledId");

                    b.ToTable("tblRoleInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.CommunicationInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.GeneralInfo", "GeneralInfo")
                        .WithMany()
                        .HasForeignKey("GenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.ConsultationInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.DoctorInfo", "DoctorInfo")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.FrontDeskInfo", "FrontDeskInfo")
                        .WithMany()
                        .HasForeignKey("FrontDeskId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.PatientInfo", "patientInfo")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("DoctorInfo");

                    b.Navigation("FrontDeskInfo");

                    b.Navigation("patientInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.DoctorInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.GeneralInfo", "GeneralInfo")
                        .WithMany()
                        .HasForeignKey("GenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.FrontDeskInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.GeneralInfo", "GeneralInfo")
                        .WithMany()
                        .HasForeignKey("GenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.GeneralInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.RoleInfo", "RoleInfo")
                        .WithMany()
                        .HasForeignKey("Roleid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("RoleInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.LoginInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.GeneralInfo", "GeneralInfo")
                        .WithMany()
                        .HasForeignKey("Genid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("GeneralInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PatientVisitInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.ConsultationInfo", "ConsultationInfo")
                        .WithMany()
                        .HasForeignKey("ConsultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.DoctorInfo", "DoctorInfo")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultationInfo");

                    b.Navigation("DoctorInfo");

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PatientVitalsInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("PatientInfo");
                });

            modelBuilder.Entity("EcommerceApi.Models.PrescriptionInfo", b =>
                {
                    b.HasOne("EcommerceApi.Models.ConsultationInfo", "ConsultationInfo")
                        .WithMany()
                        .HasForeignKey("ConsultId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.DoctorInfo", "DoctorInfo")
                        .WithMany()
                        .HasForeignKey("DoctorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("EcommerceApi.Models.PatientInfo", "PatientInfo")
                        .WithMany()
                        .HasForeignKey("PatientId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ConsultationInfo");

                    b.Navigation("DoctorInfo");

                    b.Navigation("PatientInfo");
                });
#pragma warning restore 612, 618
        }
    }
}
